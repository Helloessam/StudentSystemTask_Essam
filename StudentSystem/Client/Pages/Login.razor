@page "/login"
@using Microsoft.AspNetCore.WebUtilities;
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavgationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IScheduleService ScheduleService
<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="regnum"> Registration Number</label>
        <InputText id="regnum" @bind-Value="user.Regnum" class="form-control" />
        <ValidationMessage For="@(() => user.Regnum)" />

    </div>

    <div class="mb-3">
        <label for="password"> Password </label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>


    <button type="submit" class="btn btn-primary"> Sign In</button>
    
    <!-- <ValidationSummary /> -->

</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    private UserLogin user = new UserLogin();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;
    protected override void OnInitialized()
    {
        var uri = NavgationManager.ToAbsoluteUri(NavgationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl",out var url)){
            {
                returnUrl = url ;
            }
        }

    }
    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);

        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken",result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await ScheduleService.StoreScheduleItems(true);
            await ScheduleService.GetScheduleItemsCount();
            NavgationManager.NavigateTo("");
        }
        else
        {
            errorMessage = result.Message;

        }
    }
}
